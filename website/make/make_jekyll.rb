#!/usr/bin/env ruby
# coding: UTF-8
# 
require 'find'
require 'fileutils'
require 'yaml'


jekyll_src_dir = ARGV[0].gsub("\\","/")
global_target_dir = ARGV[1].gsub("\\","/")
jekyll_dir = global_target_dir + "/jekyll" 
maven_dir = global_target_dir + "/maven"
mustache_dir = global_target_dir + "/mustache"
meta_jekyll_dir = global_target_dir + "/meta/jekyll"
config_file = jekyll_src_dir + "/_config.yml"

config = YAML.load_file(config_file)
$stdout << config.inspect
$stdout << "\n"
$stdout.flush
meta_file = config["meta_file"]
baseurl = config["baseurl"]

# base path of jekyll source paths following the makefile command
jekyll_src_files_content = []
Find.find(jekyll_src_dir + "/_wiki") do |path|
    if (!File.directory?(path) && !path =~ /.*\/_.*/ && !path =~ /.*\.png/)
        jekyll_src_files_content << path
    end
end
Find.find(jekyll_src_dir + "/_wiki_gui") do |path|
    if (!File.directory?(path) && !path =~ /.*\/_.*/ && !path =~ /.*\.png/)
        jekyll_src_files_content << path
    end
end
Find.find(jekyll_src_dir + "/_wiki_webui") do |path|
    if (!File.directory?(path) && !path =~ /.*\/_.*/ && !path =~ /.*\.png/)
        jekyll_src_files_content << path
    end
end

jekyll_src_files_mustache = []
Find.find(jekyll_src_dir) do |path|
    if (path =~ /.*_Sidebar.md/)
        jekyll_src_files_mustache << path
    end
end

jekyll_src_files_other = []
Find.find(jekyll_src_dir) do |path|
    if (!File.directory?(path) && !jekyll_src_files_mustache.include?(path) && !jekyll_src_files_content.include?("_wiki/"+path) && !jekyll_src_files_content.include?("_wiki_gui/"+path) && !jekyll_src_files_content.include?("_wiki_webui/"+path))
        jekyll_src_files_other << path
    end
end

$stdout << "Generating maven sources ... \n"
$stdout.flush
# first step after launching the maven pom generated by the make_pom ruby script
# Move **/src/main/** && **/src/test/** to a maven_dir/sources directory
# $(MAVEN_DIR)/doc \
# $(MAVEN_DIR)/javadoc \
# $(MAVEN_DIR)/xprocdoc \
# $(MAVEN_DIR)/sources : $(MAVEN_DIR)/pom.xml
source_dir = maven_dir + "/doc"
target_dir = maven_dir + "/sources"
Find.find(source_dir) do |path|
    if path =~ /.*\/src\/main\/.*|.*\/src\/test\/.*/
        target_file = target_dir + path[source_dir.length..-1]
        FileUtils.mkdir_p(File.dirname(target_file)) unless File.exists?(File.dirname(target_file))
        FileUtils.mv(path, target_file)
    end
end


$stdout << "Generating #{meta_jekyll_dir}/#{meta_file} ... \n"
$stdout.flush
# $(META_JEKYLL_DIR)/$(meta_file) :
target_file = "#{meta_jekyll_dir}/#{meta_file}"
FileUtils.mkdir_p(File.dirname(target_file)) unless File.exists?(File.dirname(target_file))
FileUtils.touch(target_file);

$stdout << "Generating #{meta_jekyll_dir}/modules ... \n"
$stdout.flush
# $(META_JEKYLL_DIR)/modules : $(MAVEN_DIR)/doc $(MAVEN_DIR)/sources
source_dir = maven_dir + "/doc/org/daisy/pipeline/modules"
target_dir = meta_jekyll_dir + "/modules"
layout_text = "layout: doc"
Find.find(source_dir) do |path|
    if path =~ /.*\.md$/
        target_file = target_dir + path[source_dir.length..-1]
        FileUtils.mkdir_p(File.dirname(target_file)) unless File.exists?(File.dirname(target_file))
        source_has_header = false
        File.open(target_file, "w:UTF-8") do |line|
            File.open(path, "r:UTF-8").each do |read_line|
                if !source_has_header
                    if read_line[0] != "-"
                        line.puts "---".encode('utf-8')
                        line.puts layout_text.encode('utf-8')
                        line.puts "---".encode('utf-8')
                    end
                    source_has_header = true
                end
                line.puts read_line.encode('utf-8')
            end
        end
    end
end
source_dir = maven_dir + "/sources/org/daisy/pipeline/modules"
target_dir = meta_jekyll_dir + "/modules"
layout_text = "layout: source"
Find.find(source_dir) do |path|
    if path =~ /.*\.md$/
        target_file = target_dir + path[source_dir.length..-1]
        FileUtils.mkdir_p(File.dirname(target_file)) unless File.exists?(File.dirname(target_file))
        source_has_header = false
        File.open(target_file, "w:UTF-8") do |line|
            File.open(path, "r:UTF-8").each do |read_line|
                if !source_has_header
                    if read_line[0] != "-"
                        line.puts "---".encode('utf-8')
                        line.puts layout_text.encode('utf-8')
                        line.puts "---".encode('utf-8')
                    end
                    source_has_header = true
                end
                line.puts read_line.encode('utf-8')
            end
        end
    end
end

$stdout << "Generating #{meta_jekyll_dir}/api ... \n"
$stdout.flush
# $(META_JEKYLL_DIR)/api : $(MAVEN_DIR)/xprocdoc
source_dir = maven_dir + "/xprocdoc/."
target_dir = meta_jekyll_dir + "/api"
FileUtils.mkdir_p(target_dir) unless File.exists?(target_dir)
FileUtils.cp_r(source_dir, target_dir)


$stdout << "copying files to meta jekyll other files ... \n"
$stdout.flush
# $(META_JEKYLL_FILES_OTHER) : $(META_JEKYLL_DIR)/% : $(JEKYLL_SRC_DIR)/%
meta_jekyll_files_other = []
jekyll_src_files_other.each() do |path|
    target_file = meta_jekyll_dir + path[jekyll_src_dir.length..-1]
    target_dir = File.dirname(target_file)
    FileUtils.mkdir_p(target_dir) unless File.exists?(target_dir)
    FileUtils.cp_r(path, target_file)
    meta_jekyll_files_other << target_file
end

$stdout << "Generating meta jekyll mustache files ... \n"
$stdout.flush
# $(META_JEKYLL_FILES_MUSTACHE) : $(META_JEKYLL_DIR)/% : $(JEKYLL_SRC_DIR)/% $(META_JEKYLL_DIR)/$(meta_file) | gems
meta_jekyll_files_mustache = []
jekyll_src_files_mustache.each() do |path|
    target_file = meta_jekyll_dir + path[jekyll_src_dir.length..-1]
    $stdout << "mustaching #{target_file} \n"
    $stdout.flush
    FileUtils.mkdir_p(File.dirname(target_file)) unless File.exists?(File.dirname(target_file))
    FileUtils.cp_r(path, target_file)
    if !system("bundle exec ruby make/mustache.rb #{target_file} #{meta_jekyll_dir}/#{meta_file} #{meta_jekyll_dir} #{config_file}")
        exit(6)
    end
    meta_jekyll_files_mustache << target_file
end

$stdout << "Generating meta jekyll content files ... \n"
$stdout.flush
# $(META_JEKYLL_FILES_CONTENT) : $(META_JEKYLL_DIR)/% : $(JEKYLL_SRC_DIR)/%
meta_jekyll_files_content = []
jekyll_src_files_content.each() do |path|
    target_file = meta_jekyll_dir + path[jekyll_src_dir.length..-1]
    FileUtils.mkdir_p(File.dirname(target_file)) unless File.exists?(File.dirname(target_file))
    source_has_header = false
    File.open(target_file, "w:UTF-8") do |line|
        File.open(path, "r:UTF-8").each do |read_line|
            if !source_has_header
                if read_line[0] != "-"
                    line.puts "---".encode('utf-8')
                    line.puts "---".encode('utf-8')
                end
                source_has_header = true
            end
            line.puts read_line.encode('utf-8')
        end
    end
    meta_jekyll_files_content << target_file
end

$stdout << "Generating meta jekyll _site ... \n"
$stdout.flush
# $(META_JEKYLL_DIR)/_site : %/_site : %/$(meta_file) %/modules %/api $(META_JEKYLL_FILES)
if !system("bundle exec jekyll build --destination #{meta_jekyll_dir}/_site#{baseurl}", :chdir=>meta_jekyll_dir )
    exit(5)
end

$stdout << "Generating jekyll meta file ... \n"
$stdout.flush
# $(JEKYLL_DIR)/$(meta_file) : $(META_JEKYLL_DIR)/_site
FileUtils.mkdir_p(jekyll_dir) unless File.exists?(jekyll_dir)
if !system("bundle exec ruby make/make_meta.rb \"#{meta_jekyll_dir}/_site#{baseurl}**/*.html\" #{meta_jekyll_dir}/_site#{baseurl} #{config_file} > #{jekyll_dir}/#{meta_file}")
    exit(4)
end

$stdout << "Generating jekyll api ... \n"
$stdout.flush
# $(JEKYLL_DIR)/api : $(MAVEN_DIR)/javadoc $(MAVEN_DIR)/xprocdoc
source_dir = maven_dir + "/javadoc/."
target_dir = jekyll_dir + "/api"
FileUtils.mkdir_p(target_dir) unless File.exists?(target_dir)
FileUtils.cp_r(source_dir, target_dir)
source_dir = maven_dir + "/xprocdoc/."
FileUtils.cp_r(source_dir, target_dir)

$stdout << "Generating jekyll modules ... \n"
$stdout.flush
# $(JEKYLL_DIR)/modules : $(MUSTACHE_DIR)/modules $(MAVEN_DIR)/sources
source_dir = mustache_dir + "/modules"
target_dir = jekyll_dir + "/modules"
layout_text = "layout: doc"
Find.find(source_dir) do |path|
    target_file = target_dir + path[source_dir.length..-1]
    if path =~ /.*\.md$/
        FileUtils.mkdir_p(File.dirname(target_file)) unless File.exists?(File.dirname(target_file))
        source_has_header = false
        File.open(target_file, "w:UTF-8") do |line|
            File.open(path, "r:UTF-8").each do |read_line|
                if !source_has_header
                    if read_line[0] != "-"
                        line.puts "---".encode('utf-8')
                        line.puts layout_text.encode('utf-8')
                        line.puts "---".encode('utf-8')
                    end
                    source_has_header = true
                end
                line.puts read_line.encode('utf-8')
            end
        end
    elsif !File.directory?(path)
        FileUtils.mkdir_p(File.dirname(target_file)) unless File.exists?(File.dirname(target_file))
        FileUtils.cp_r(path, target_file)
    end
end
source_dir = maven_dir + "/sources/org/daisy/pipeline/modules"
target_dir = jekyll_dir + "/modules"
layout_text = "layout: source"
Find.find(source_dir) do |path|
    target_file = target_dir + path[source_dir.length..-1]
    if path =~ /.*\.md$/
        FileUtils.mkdir_p(File.dirname(target_file)) unless File.exists?(File.dirname(target_file))
        source_has_header = false
        File.open(target_file, "w:UTF-8") do |line|
            File.open(path, "r:UTF-8").each do |read_line|
                if !source_has_header
                    if read_line[0] != "-"
                        line.puts "---".encode('utf-8')
                        line.puts layout_text.encode('utf-8')
                        line.puts "---".encode('utf-8')
                    end
                    source_has_header = true
                end
                line.puts read_line.encode('utf-8')
            end
        end
    elsif !File.directory?(path)
        FileUtils.mkdir_p(File.dirname(target_file)) unless File.exists?(File.dirname(target_file))
        FileUtils.cp_r(path, target_file)
    end
end

$stdout << "Copying jekyll other files ... \n"
$stdout.flush
# $(JEKYLL_FILES_OTHER) : $(JEKYLL_DIR)/% : $(JEKYLL_SRC_DIR)/%
jekyll_files_other = []
jekyll_src_files_other.each() do |path|
    target_file = jekyll_dir + path[jekyll_src_dir.length..-1]
    FileUtils.mkdir_p(File.dirname(target_file)) unless File.exists?(File.dirname(target_file))
    FileUtils.cp_r(path, target_file)
    jekyll_files_other << target_file
end

$stdout << "Copying jekyll src mustache files to jekyll build ... \n"
$stdout.flush
# $(JEKYLL_FILES_MUSTACHE) : $(JEKYLL_DIR)/% : $(JEKYLL_SRC_DIR)/% $(JEKYLL_DIR)/$(meta_file) | gems
jekyll_files_mustache = []
jekyll_src_files_mustache.each() do |path|
    target_file = jekyll_dir + path[jekyll_src_dir.length..-1]
    FileUtils.mkdir_p(File.dirname(target_file)) unless File.exists?(File.dirname(target_file))
    FileUtils.cp_r(path, target_file)
    if !system("bundle exec ruby make/mustache.rb #{target_file} #{jekyll_dir}/#{meta_file} #{jekyll_dir} #{config_file}")
        exit(3)
    end
    jekyll_files_mustache << target_file
end

$stdout << "Generating jekyll content files ... \n"
$stdout.flush
# $(JEKYLL_FILES_CONTENT) : $(JEKYLL_DIR)/% : $(JEKYLL_SRC_DIR)/%
jekyll_files_content = []
jekyll_src_files_content.each() do |path|
    target_file = jekyll_dir + path[jekyll_src_dir.length..-1]
    FileUtils.mkdir_p(File.dirname(target_file)) unless File.exists?(File.dirname(target_file))
    source_has_header = false
    File.open(target_file, "w:UTF-8") do |line|
        File.open(path, "r:UTF-8").each do |read_line|
            if !source_has_header
                if read_line[0] != "-"
                    line.puts "---".encode('utf-8')
                    line.puts "---".encode('utf-8')
                end
                source_has_header = true
            end
            line.puts read_line.encode('utf-8')
        end
    end
    jekyll_files_content << target_file
end

$stdout << "Generating jekyll site ... \n"
$stdout.flush
# $(JEKYLL_DIR)/_site : %/_site : %/$(meta_file) %/modules %/api $(JEKYLL_FILES) | gems
if !system("bundle exec jekyll build --destination _site#{baseurl}/", :chdir=>jekyll_dir)
    exit(2)
end
if !system("bundle exec ruby make/post_process.rb #{jekyll_dir}/#{meta_file} #{jekyll_dir}/_site#{baseurl} #{jekyll_dir} #{config_file}")
    exit(1)
end

